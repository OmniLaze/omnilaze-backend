name: Backend Deploy to AWS ECS Fargate

on:
push:
branches: ["main"]

env:
AWS_REGION: ${{ secrets.AWS_REGION }}
ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
ECS_TASK_MIGRATIONS: ${{ secrets.ECS_TASK_MIGRATIONS }}
SUBNETS: ${{ secrets.SUBNETS }}
SECURITY_GROUPS: ${{ secrets.SECURITY_GROUPS }}

jobs:
deploy:
runs-on: ubuntu-latest
permissions:
id-token: write
contents: read
steps:
- name: Checkout
uses: actions/checkout@v4

```
  - name: Setup Node
    uses: actions/setup-node@v4
    with:
      node-version: 20

  - name: Configure AWS credentials
    uses: aws-actions/configure-aws-credentials@v4
    with:
      role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      aws-region: ${{ env.AWS_REGION }}

  - name: Login to Amazon ECR
    id: login-ecr
    uses: aws-actions/amazon-ecr-login@v2

  - name: Build, tag, and push image to ECR
    env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      IMAGE_TAG: ${{ github.sha }}
    run: |
      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG omnilaze-backend
      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  - name: Install jq
    run: sudo apt-get update && sudo apt-get install -y jq

  - name: Register new Task Definition revision with new image
    env:
      ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      IMAGE_TAG: ${{ github.sha }}
    run: |
      CURRENT_TD_ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query 'services[0].taskDefinition' --output text)
      aws ecs describe-task-definition --task-definition "$CURRENT_TD_ARN" --query 'taskDefinition' > td.json
      NEW_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \\
        jq 'del(.revision,.status,.taskDefinitionArn,.requiresAttributes,.registeredAt,.registeredBy,.compatibilities) | (.containerDefinitions[0].image)=env(NEW_IMAGE)' td.json > td-new.json
      NEW_TD_ARN=$(aws ecs register-task-definition --cli-input-json file://td-new.json --query 'taskDefinition.taskDefinitionArn' --output text)
      echo "NEW_TD_ARN=$NEW_TD_ARN" >> $GITHUB_ENV

  - name: Update ECS service to new task definition
    run: |
      aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --task-definition "$NEW_TD_ARN"

  - name: Run DB migrations as ECS Task
    run: |
      aws ecs run-task \\
        --cluster $ECS_CLUSTER \\
        --task-definition $ECS_TASK_MIGRATIONS \\
        --launch-type FARGATE \\
        --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=DISABLED}"

```

